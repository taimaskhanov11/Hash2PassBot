from aiogram import Router, types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.state import StatesGroup, State
from aiogram.utils import markdown

from hash2passbot.apps.bot import temp
from hash2passbot.apps.bot.markups.admin import statistics_markups, admin_markups
from hash2passbot.db.models import User, Subscription, Statistic

router = Router()


class SendMail(StatesGroup):
    preview = State()
    select = State()

    button = State()
    send = State()


async def statistics_start(call: types.CallbackQuery, state: FSMContext):
    """
    –°–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–¥–µ–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —Å–∫–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ,
     —Å–∫–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ API —Å–∞–π—Ç–∞. –¢–∞–∫ –∂–µ –≤—ã–≤–µ—Å—Ç–∏ –≤ %.
     –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ = 100%. –ù—É–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î,
     –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–∏–≥–¥–µ.
     """
    await state.clear()
    all_count = await User.count_all()
    today_count = await User.count_new_today()
    all_limits = await Subscription.all_limits()
    # await save_statistics()
    temp.STATS = await Statistic.first()
    bold = markdown.hbold
    answer = (f"üìä –û–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {bold(all_count)}\n"
              f"üìä –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {bold(today_count)}\n"
              f"üìä –û–±—â–µ–µ —á–∏—Å–ª–æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞–ø—Ä–æ—Å–æ–≤: {bold(all_limits)}\n\n"
              f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–¥–µ–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {bold(temp.STATS.total_requests_count)} (100%)\n"
              )

    if temp.STATS.total_requests_count:
        found_local_count = bold(round(100 * (temp.STATS.found_local_count / temp.STATS.total_requests_count), 2))
        found_in_saved_count = bold(round(100 * (temp.STATS.found_in_saved_count / temp.STATS.total_requests_count), 2))
        found_via_api_count = bold(round(100 * (temp.STATS.found_via_api_count / temp.STATS.total_requests_count), 2))
        not_found_count = bold(round(100 * (temp.STATS.not_found_count / temp.STATS.total_requests_count), 2))
        answer += (
            f"   üìä –ù–∞–π–¥–µ–Ω–æ  –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ: {bold(temp.STATS.found_local_count)} ({found_local_count}%)\n"
            f"   üìä –ù–∞–π–¥–µ–Ω–æ  –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –±–∞–∑–µ: {bold(temp.STATS.found_in_saved_count)} ({found_in_saved_count}%)\n"
            f"   üìä –ù–∞–π–¥–µ–Ω–æ  —á–µ—Ä–µ–∑ API: {bold(temp.STATS.found_via_api_count)} ({found_via_api_count}%)\n"
            f"   üìä –ù–ï –ù–∞–π–¥–µ–Ω–æ: {bold(temp.STATS.not_found_count)} ({not_found_count})%")

    await call.message.answer(answer, "html", reply_markup=admin_markups.back())


async def users_count(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    count = await User.count_all()
    await call.message.answer(f"–í –±–æ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {count} üë•",
                              reply_markup=statistics_markups.back())


async def users_count_new(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    count = await User.count_new_today()
    await call.message.answer(f"–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {count} üë•",
                              reply_markup=statistics_markups.back())


def register_statistics(dp: Router):
    dp.include_router(router)

    callback = router.callback_query.register
    message = router.message.register

    callback(statistics_start, text="statistics", state="*")
    callback(users_count, text="users_count", state="*")
    callback(users_count_new, text="users_count_new", state="*")
