from aiogram import Dispatcher, Router, types
from aiogram.dispatcher.fsm.context import FSMContext

from hash2passbot.apps.bot.markups.common import common_markups
from hash2passbot.apps.bot.utils import channel_status_check, stop
from hash2passbot.db.models import User
from hash2passbot.loader import _

router = Router()


async def check_subscribe(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    if await channel_status_check(call.from_user.id):
        await call.message.answer(_("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–π–¥–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
        return True
    await call.answer(_("‚ùå –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã"), show_alert=True)
    return False


async def start(message: types.Message | types.CallbackQuery, user: User, is_new: bool, state: FSMContext):
    await state.clear()
    if isinstance(message, types.CallbackQuery):
        message = message.message
    await message.answer(_("–°–µ—Ä–≤–∏—Å –ø–æ –ø–æ–∏—Å–∫—É —Å—Ç—Ä–æ–∫–∏ –ø–∞—Ä–æ–ª—è –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Ö–µ—à—É."),
                         reply_markup=common_markups.start())

    # await message.answer(b"asd")


async def profile(message: types.Message, user: User, state: FSMContext):
    answer = _("üîë ID: {}\n"
               "üë§ –õ–æ–≥–∏–Ω: @{}\n"
               "üìÑ –û—Å—Ç–∞–≤—à–∏–µ—Å—è —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã - {}").format(
        user.user_id,
        user.username,
        user.subscription.limit
    )
    await message.answer(answer, reply_markup=common_markups.profile())


async def description(message: types.Message, state: FSMContext):
    await message.answer(_(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∏–º—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, "
        "–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞. "
        "–ß—Ç–æ –µ—Å—Ç—å —É –Ω–∞—Å –≤ –±–∞–∑–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ç: "
        "https://telegra.ph/Spisok-utechek-zagruzhennyh-v-bazu-dannyh-telegram-bota-MailLeaksBot-01-24"),
        reply_markup=common_markups.description()
    )


async def support(message: types.Message, state: FSMContext):
    await message.answer(_("–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Å–∞—Ç—å @chief_MailLeaks!"), reply_markup=common_markups.support())


def register_common(dp: Dispatcher):
    dp.include_router(router)

    callback = router.callback_query.register
    message = router.message.register

    message(start, commands="start", state="*")
    message(stop, commands="stop", state="*")
    callback(start, text="start", state="*")

    message(profile, text_startswith="üë§")
    message(description, text_startswith="üìÑ")
    message(support, text_startswith="üôã‚Äç‚ôÇ")
    callback(check_subscribe, text="check_subscribe", state="*")
